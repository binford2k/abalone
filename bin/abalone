#! /usr/bin/env ruby

require 'rubygems'
require 'optparse'
require 'yaml'
require 'abalone'
require 'abalone/terminal'

if Gem.win_platform?
  FileUtils.mkdir_p 'C:\ProgramData\abalone' rescue nil
  configfile = 'C:\ProgramData\abalone\config.yaml'
  defaultlog = 'C:\ProgramData\abalone\abalone.log'
else
  configfile = '/etc/abalone/config.yaml'
  defaultlog = '/var/log/abalone'
end

defaults = {
  :port        => 9000,
  :bind        => '0.0.0.0',
  :logfile     => $stderr,
  :autoconnect => true,
}
loglevel   = Logger::WARN
options    = {}
optparse = OptionParser.new { |opts|
    opts.banner = "Usage : abalone [-p <port>] [-l [logfile]] [-d]
         -- Runs the Abalone web shell.

"

    opts.on("-c CONFIGFILE", "--config CONFIGFILE", "Load configuration from a file. (#{configfile})") do
        configfile = arg
    end

    opts.on("-d", "--debug", "Display or log debugging messages") do
        loglevel = Logger::DEBUG
    end

    opts.on("-l [LOGFILE]", "--logfile [LOGFILE]", "Path to logfile. Defaults to no logging, or #{defaultlog} if no filename is passed.") do |arg|
        options[:logfile] = arg || defaultlog
    end

    opts.on("-p PORT", "--port PORT", "Port to listen on. Defaults to 9000.") do |arg|
        options[:port] = arg
    end

    opts.separator('')

    opts.on("-h", "--help", "Displays this help") do
        puts
        puts opts
        puts
        exit
    end
}
optparse.parse!

config  = YAML.load_file(configfile) rescue {}
options = defaults.merge(config.merge(options))

logger           = Logger.new(options[:logfile])
logger.level     = loglevel
options[:logger] = logger

if options[:params].class == Hash
  options[:params].each do |param, data|
    next if data.nil?
    next unless data.include? :values

    data[:values].collect! do |value|
      case value
      when Regexp
        value
      when String
        # if a string encapsulated regex, replace with that regex
        value =~ /^\/(.*)\/$/ ? Regexp.new($1) : value
      end
    end
  end
end

# This is the unix standard, so we'll default to this if enabled, but unspecified
options[:bannerfile] = '/etc/issue.net' if options[:bannerfile] == true

raise 'Specify only one of a login command or SSH settings' if options.include? :command and options.include? :ssh

if options.include? :command
  raise ":params must be an Array or Hash, not #{options[:params].class}" unless [Array, Hash, NilClass].include? options[:params].class
  raise ":command should be a String or an Array, not a #{options[:command].class}." unless [Array, String].include? options[:command].class
end

if options.include? :ssh
  raise "SSH configuration should be a Hash, not a #{options[:ssh].class}." unless options[:ssh].class == Hash
  raise "SSH configuration must include the host" unless options[:ssh].include? :host
end

# If we're running under systemd, start a watchdog to let it know we're still alive.
# If four sequential pings fail, then systemd will kill & respawn us.
if ENV.include? 'WATCHDOG_USEC'
  require 'abalone/watchdog'
  # 1/4 of the timeout period, in seconds
  Abalone::Watchdog.new(Integer(ENV['WATCHDOG_USEC'])/4000000, options)
end

puts
puts
puts "Starting Abalone Web Shell. Browse to http://localhost:#{options[:port]}"
puts
puts

Abalone.run! options
